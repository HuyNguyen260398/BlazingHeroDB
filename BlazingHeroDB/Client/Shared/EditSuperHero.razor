@inject ISuperHeroService SuperHeroService
@inject IJSRuntime JSRuntime

@if(Hero.Id == 0)
{
    <h3>Create new hero</h3>
}
else
{
    <h3>Edit '@Hero.HeroName'</h3>
}

<EditForm Model="Hero" OnSubmit="HandleSubmit">
    <div class="form-group">
        <label>First Name</label>
        <InputText @bind-Value="Hero.FirstName" class="form-control"></InputText>
    </div>
    <div class="form-group">
        <label>Last Name</label>
        <InputText @bind-Value="Hero.LastName" class="form-control"></InputText>
    </div>
    <div class="form-group">
        <label>Hero Name</label>
        <InputText @bind-Value="Hero.HeroName" class="form-control"></InputText>
    </div>
    <div class="form-group">
        <label>Comic</label>
        <br />
        <InputRadioGroup @bind-Value="comicId" class="form-group">
            @foreach (var comic in SuperHeroService.Comics)
            {
                <InputRadio Value="comic.Id" /><span style="padding-left: 5px;">@comic.Name</span><br />
            }
        </InputRadioGroup>
    </div>
    <br/>
    <br/>
    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

@code {
    [Parameter]
    public SuperHero Hero { get; set; } = new SuperHero();

    int comicId = 1;

    protected override async Task OnParametersSetAsync()
    {
        await SuperHeroService.GetComics();
        //comicId = Hero.Comic.Id;
    }

    async Task HandleSubmit()
    {
        Hero.Comic = SuperHeroService.Comics.FirstOrDefault(c => c.Id == comicId);
        //Console.WriteLine("Submit was called");
        //await JSRuntime.InvokeVoidAsync("console.log", Hero);

        if (Hero.Id == 0)
        {
            // Create
            await SuperHeroService.CreateSuperHero(Hero);
        }
        else
        {
            // Update
            await SuperHeroService.UpdateSuperHero(Hero, Hero.Id);
        }

        
    }
}
